{"version":3,"sources":["components/CarouselSetting.tsx","components/Carousel.tsx","App.tsx","index.tsx"],"names":["CarouselSetting","id","defaultValue","range","step","callback","convertedId","replace","toLowerCase","convertToLabel","className","htmlFor","toUpperCase","slice","type","min","max","onChange","target","Number","value","Carousel","state","frameSize","itemWidth","animationDuration","translateValue","getNextShift","getAvailableTranslate","props","images","length","handlePreviousButtonClick","setState","handleNextButtonClick","availableTranslate","setStep","setFrameSize","setItemWidth","setAnimationDuration","this","style","width","transform","transition","map","image","index","src","alt","String","onClick","disabled","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.92271267.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  id: string;\n  step: number;\n  range: [number, number];\n  defaultValue: number;\n  callback: (value: number) => void;\n}\n\nconst convertToLabel = (id: string): string => {\n  return id\n    .replace(/([a-z0-9])([A-Z])/g, '$1 $2')\n    .toLowerCase();\n};\n\nexport const CarouselSetting: React.FC<Props> = ({\n  id,\n  defaultValue,\n  range,\n  step,\n  callback,\n}) => {\n  const convertedId = convertToLabel(id);\n\n  return (\n    <div className=\"d-flex justify-content-between\">\n      <label\n        className=\"me-2 text-center\"\n        htmlFor={id}\n      >\n        {convertedId[0].toUpperCase() + convertedId.slice(1)}\n      </label>\n\n      <input\n        id={id}\n        type=\"range\"\n        step={step}\n        min={range[0]}\n        max={range[1]}\n        defaultValue={defaultValue}\n        onChange={({ target }) => (\n          callback(Number(target.value))\n        )}\n      />\n    </div>\n  );\n};\n","import './Carousel.scss';\nimport { Component } from 'react';\nimport { CarouselSetting } from './CarouselSetting';\n\ninterface Props {\n  images: string[];\n}\n\ninterface State {\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  translateValue: number,\n}\n\nexport class Carousel extends Component<Props, State> {\n  state = {\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    translateValue: 0,\n  };\n\n  getNextShift = () => (\n    this.state.step * this.state.itemWidth\n  );\n\n  getAvailableTranslate = () => (\n    (this.state.frameSize - this.props.images.length) * this.state.itemWidth\n  );\n\n  handlePreviousButtonClick = () => {\n    const { translateValue } = this.state;\n\n    if (translateValue < -this.getNextShift()) {\n      this.setState(state => ({\n        translateValue: state.translateValue + this.getNextShift(),\n      }));\n    } else {\n      this.setState({\n        translateValue: 0,\n      });\n    }\n  };\n\n  handleNextButtonClick = () => {\n    const { translateValue } = this.state;\n    const availableTranslate = this.getAvailableTranslate();\n    const spaceRequired = availableTranslate + this.getNextShift();\n\n    if (translateValue >= spaceRequired) {\n      this.setState(state => ({\n        translateValue: state.translateValue - this.getNextShift(),\n      }));\n    } else {\n      this.setState({\n        translateValue: availableTranslate,\n      });\n    }\n  };\n\n  setStep = (value: number) => {\n    this.setState({\n      translateValue: 0,\n      step: value,\n    });\n  };\n\n  setFrameSize = (value: number) => {\n    this.setState({\n      translateValue: 0,\n      frameSize: value,\n    });\n  };\n\n  setItemWidth = (value: number) => {\n    this.setState({\n      translateValue: 0,\n      itemWidth: value,\n    });\n  };\n\n  setAnimationDuration = (value: number) => {\n    this.setState({\n      translateValue: 0,\n      animationDuration: value,\n    });\n  };\n\n  render() {\n    const { images } = this.props;\n    const {\n      frameSize,\n      itemWidth,\n      animationDuration,\n      translateValue,\n    } = this.state;\n\n    return (\n      <div\n        className=\"\n          Carousel\n          d-flex flex-column align-items-center\n        \"\n      >\n        <div\n          className=\"Carousel__container\"\n          style={{\n            width: `${itemWidth * frameSize}px`,\n          }}\n        >\n          <ul\n            className=\"Carousel__list d-flex\"\n            style={{\n              transform: `translateX(${translateValue}px)`,\n              transition: `transform ${animationDuration}ms`,\n            }}\n          >\n            {images.map((image, index) => (\n              <li key={image}>\n                <img\n                  src={image}\n                  alt={String(index)}\n                  style={{\n                    width: `${itemWidth}px`,\n                  }}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <div\n          className=\"\n            Carousel__control\n            d-flex flex-column align-items-center\n          \"\n        >\n          <div className=\"mb-3\">\n            <button\n              className=\"Carousel__control-button me-3\"\n              type=\"button\"\n              onClick={this.handlePreviousButtonClick}\n              disabled={!this.state.translateValue}\n            >\n              Previous\n            </button>\n\n            <button\n              className=\"Carousel__control-button me-3\"\n              type=\"button\"\n              onClick={this.handleNextButtonClick}\n              disabled={this.state.translateValue === this.getAvailableTranslate()}\n            >\n              Next\n            </button>\n          </div>\n\n          <div>\n            <CarouselSetting\n              id=\"width\"\n              step={10}\n              range={[50, 260]}\n              defaultValue={130}\n              callback={this.setItemWidth}\n            />\n\n            <CarouselSetting\n              id=\"frameSize\"\n              step={1}\n              range={[1, 5]}\n              defaultValue={3}\n              callback={this.setFrameSize}\n            />\n\n            <CarouselSetting\n              id=\"step\"\n              step={1}\n              range={[1, 5]}\n              defaultValue={3}\n              callback={this.setStep}\n            />\n\n            <CarouselSetting\n              id=\"animationDuration\"\n              step={100}\n              range={[100, 3000]}\n              defaultValue={1000}\n              callback={this.setAnimationDuration}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import './App.scss';\nimport { Component } from 'react';\nimport { Carousel } from './components/Carousel';\nimport '.';\n\ninterface State {\n  images: string[];\n}\n\nexport class App extends Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n  };\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"App__title mb-3\">\n          {`${images.length}-image carousel`}\n        </h1>\n\n        <Carousel images={images} />\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}